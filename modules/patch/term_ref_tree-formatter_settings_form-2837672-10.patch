Index: config/schema/term_reference_tree.schema.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/schema/term_reference_tree.schema.yml	(revision )
+++ config/schema/term_reference_tree.schema.yml	(revision )
@@ -0,0 +1,19 @@
+field.widget.settings.term_reference_tree:
+  type: mapping
+  label: 'Term reference tree widget settings'
+  mapping:
+    start_minimized:
+      type: boolean
+      label: 'Start minimized'
+    leaves_only:
+      type: boolean
+      label: 'Leaves only'
+    select_parents:
+      type: boolean
+      label: 'Select parents automatically'
+    cascading_selection:
+      type: integer
+      label: 'Cascading selection'
+    max_depth:
+      type: integer
+      label: 'Maximum Depth'
\ No newline at end of file
Index: src/Plugin/Field/FieldWidget/TermReferenceTree.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Plugin/Field/FieldWidget/TermReferenceTree.php	(revision b44575344b9748fb4054fdeaf5e42ca6c7348752)
+++ src/Plugin/Field/FieldWidget/TermReferenceTree.php	(revision )
@@ -1,4 +1,5 @@
-<?php /**
+<?php
+/**
  * @file
  * Contains \Drupal\term_reference_tree\Plugin\Field\FieldWidget\TermReferenceTree.
  */
@@ -8,6 +9,7 @@
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\taxonomy\Entity\Vocabulary;

 /**
@@ -19,19 +21,119 @@
  * )
  */
 class TermReferenceTree extends WidgetBase {
+  const CASCADING_SELECTION_NONE = '0';
+  const CASCADING_SELECTION_BOTH = '1';
+  const CASCADING_SELECTION_SELECT = '2';
+  const CASCADING_SELECTION_DESELECT = '3';

- /**
+  /**
    * {@inheritdoc}
    */
   public static function defaultSettings() {
-    return parent::defaultSettings();
+    return [
+      'start_minimized' => TRUE,
+      'leaves_only' => FALSE,
+      'select_parents' => FALSE,
+      'cascading_selection' => self::CASCADING_SELECTION_NONE,
+      'max_depth' => 0,
+    ] + parent::defaultSettings();
   }

   /**
    * {@inheritdoc}
    */
   public function settingsForm(array $form, FormStateInterface $form_state) {
-    return parent::settingsForm($form, $form_state);
+    $form = parent::settingsForm($form, $form_state);
+
+    $form['start_minimized'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Start minimized'),
+      '#description' => $this->t('Make the tree appear minimized on the form by default'),
+      '#default_value' => $this->getSetting('start_minimized'),
+    ];
+
+    $form['leaves_only'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Leaves only'),
+      '#description' => t("Don't allow the user to select items that have children"),
+      '#default_value' => $this->getSetting('leaves_only'),
+      '#return_value' => 1,
+    );
+
+    $form['select_parents'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Select parents automatically'),
+      '#description' => t("When turned on, this option causes the widget to automatically select the ancestors of all selected items. In Leaves Only mode, the parents will be added invisibly to the selected value.  <em>This option is only valid if an unlimited number of values can be selected.</em>"),
+      '#default_value' => $this->getSetting('select_parents'),
+      '#return_value' => 1,
+    );
+
+    $form['cascading_selection'] = array(
+      '#type' => 'select',
+      '#title' => t('Cascading selection'),
+      '#description' => t('On parent selection, automatically select children if none were selected. Some may then be manually unselected. In the same way, on parent unselection, unselect children if all were selected. <em>This option is only valid if an unlimited number of values can be selected.</em>'),
+      '#default_value' => $this->getSetting('cascading_selection'),
+      '#options' => array(
+        self::CASCADING_SELECTION_NONE => t('None'),
+        self::CASCADING_SELECTION_BOTH => t('Select / deselect'),
+        self::CASCADING_SELECTION_SELECT => t('Only select'),
+        self::CASCADING_SELECTION_DESELECT => t('Only deselect'),
+      )
+    );
+
+    if ($this->fieldDefinition->getFieldStorageDefinition()->getCardinality() !== FieldStorageConfig::CARDINALITY_UNLIMITED) {
+      $form['select_parents']['#disabled'] = TRUE;
+      $form['select_parents']['#default_value'] = FALSE;
+      $form['select_parents']['#description'] .= ' <em>' . $this->t("This option is only valid if an unlimited number of values can be selected.") . '</em>';
+
+      $form['cascading_selection']['#disabled'] = TRUE;
+      $form['cascading_selection']['#default_value'] = self::CASCADING_SELECTION_NONE;
+      $form['cascading_selection']['#description'] .= ' <em>' . $this->t("This option is only valid if an unlimited number of values can be selected.") . '</em>';
+    }
+
+    $form['max_depth'] = [
+      '#type' => 'number',
+      '#title' => $this->t('Maximum Depth'),
+      '#description' => $this->t("Only show items up to this many levels deep."),
+      '#default_value' => $this->getSetting('max_depth'),
+      '#min' => 0,
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsSummary() {
+    $summary = array();
+
+    if ($this->getSetting('start_minimized')) {
+      $summary[] = $this->t('Start minimized');
+    }
+
+    if ($this->getSetting('leaves_only')) {
+      $summary[] = $this->t('Leaves only');
+    }
+
+    if ($this->getSetting('select_parents')) {
+      $summary[] = $this->t('Select parents automatically');
+    }
+
+    $cascadingSelection = $this->getSetting('cascading_selection');
+    if ($cascadingSelection == self::CASCADING_SELECTION_BOTH) {
+      $summary[] = $this->t('Cascading selection');
+    } else if ($cascadingSelection == self::CASCADING_SELECTION_SELECT) {
+      $summary[] = sprintf('%s (%s)', $this->t('Cascading selection'), t('Only select'));
+    } else if ($cascadingSelection == self::CASCADING_SELECTION_DESELECT) {
+      $summary[] = sprintf('%s (%s)', $this->t('Cascading selection'), t('Only deselect'));
+    }
+
+    if ($this->getSetting('max_depth')) {
+      $summary[] = $this->formatPlural($this->getSetting('max_depth'), 'Maximum Depth: @count level', 'Maximum Depth: @count levels');
+    }
+
+    return $summary;
   }

   /**
@@ -45,10 +147,12 @@
     $element['#default_value'] = $items->getValue();
     $element['#vocabularies'] = $vocabularies;
     $element['#max_choices'] = $this->fieldDefinition->getFieldStorageDefinition()->getCardinality();
-    $element['#leaves_only'] = FALSE;
+    $element['#leaves_only'] = $this->getSetting('leaves_only');
+    $element['#select_parents'] = $this->getSetting('select_parents');
+    $element['#cascading_selection'] = $this->getSetting('cascading_selection');
     $element['#value_key'] = 'target_id';
-    $element['#max_depth'] = 0;
-    $element['#start_minimized'] = TRUE;
+    $element['#max_depth'] = $this->getSetting('max_depth');
+    $element['#start_minimized'] = $this->getSetting('start_minimized');
     $element['#element_validate'] = [[get_class($this), 'validateTermReferenceTreeElement']];
     return $element;
   }
Index: term_reference_tree.module
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- term_reference_tree.module	(revision b44575344b9748fb4054fdeaf5e42ca6c7348752)
+++ term_reference_tree.module	(revision )
@@ -34,6 +34,7 @@
  * Returns HTML for a checkbox_tree form element.
  */
 function theme_checkbox_tree($variables) {
+
   $element = $variables['element'];
   $element['#children'] = drupal_render_children($element);

@@ -51,17 +52,28 @@
     $attributes['class'][] = "term-reference-tree-collapsed";
   }

-  if (array_key_exists('#cascading_selection', $element) && $element['#cascading_selection']) {
-    $attributes['class'][] = "term-reference-tree-cascading-selection";
-  }
-
   if (array_key_exists('#track_list', $element) && $element['#track_list']) {
     $attributes['class'][] = "term-reference-tree-track-list-shown";
   }

+  if(!empty($variables['element']['#select_parents'])) {
+    $attributes['class'][] = "term-reference-tree-select-parents";
+  }
+
+  if($variables['element']['#cascading_selection'] != \Drupal\term_reference_tree\Plugin\Field\FieldWidget\TermReferenceTree::CASCADING_SELECTION_NONE) {
+    $attributes['class'][] = "term-reference-tree-cascading-selection";
+  }
+
+  if($variables['element']['#cascading_selection'] == \Drupal\term_reference_tree\Plugin\Field\FieldWidget\TermReferenceTree::CASCADING_SELECTION_SELECT) {
+    $attributes['class'][] = "term-reference-tree-cascading-selection-mode-select";
+  } else if($variables['element']['#cascading_selection'] == \Drupal\term_reference_tree\Plugin\Field\FieldWidget\TermReferenceTree::CASCADING_SELECTION_DESELECT) {
+    $attributes['class'][] = "term-reference-tree-cascading-selection-mode-deselect";
+  }
+
   if (!empty($element['#attributes']['class'])) {
     $attributes['class'] = array_merge($attributes['class'], $element['#attributes']['class']);
   }
+
   return
     '<div' . new \Drupal\Core\Template\Attribute($attributes) . '>'
     . (!empty($element['#children']) ? $element['#children'] : '')
@@ -307,13 +319,15 @@
   else {
     $term_name = $term->name;
   }
+
   $container = array(
     '#type' => 'checkbox_tree_item',
     '#max_choices' => $max_choices,
     '#leaves_only' => $leaves_only,
     '#term_name' => $term_name,
     '#level_start_minimized' => FALSE,
-    '#depth' => $depth,
+    '#select_parents' => $element['#select_parents'],
+    '#depth' => $depth
   );

   if (!$element['#leaves_only'] || count($term->children) == 0) {
Index: term_reference_tree.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- term_reference_tree.js	(revision b44575344b9748fb4054fdeaf5e42ca6c7348752)
+++ term_reference_tree.js	(revision )
@@ -18,8 +18,8 @@
     });
     */

-
-    $('.term-reference-tree', context).once('term-reference-tree', function() {
+    // @todo: for some reason the original "once" implementation did not work
+    $('.term-reference-tree', context).each(function() {
       // On page load, check whether the maximum number of choices is already selected.
       // If so, disable the other options.
       var tree = $(this);
@@ -28,6 +28,11 @@
         checkMaxChoices(tree, $(this));
       });

+      //On page load, check if the user wants a cascading selection.
+      if($(this).hasClass('term-reference-tree-select-parents')) {
+        $(this).find('.form-checkbox').parent().addClass('select-parents');
+      }
+
       //On page load, check if the user wants a track list. If so, add the
       //currently selected items to it.
       if($(this).hasClass('term-reference-tree-track-list-shown')) {
@@ -108,25 +113,28 @@

       //On page load, check if the user wants a cascading selection.
       if($(this).hasClass('term-reference-tree-cascading-selection')) {
+        var mode_select = $(this).hasClass('term-reference-tree-cascading-selection-mode-select');
+        var mode_deselect = $(this).hasClass('term-reference-tree-cascading-selection-mode-deselect');

         //Check children when checkboxes are clicked.
         $(this).find('.form-checkbox').change(function(event) {
           var event_target = $(event.target);
+          var event_target_checked = event_target.is(':checked');
           var control_id = event_target.attr('id');
-          var children = event_target.parent().next().children().children('div.form-type-checkbox').children('input[id^="' + control_id + '-children"]');
-          if(event_target.attr('checked')) {
-            //Checkbox checked - check children if none were checked.
-            if(!$(children).filter(':checked').length) {
-              $(children).click().trigger('change');
+          var children = event_target.parent().next().children().children('div.js-form-type-checkbox').children('input[id^="' + control_id + '-children"]');
+
+          if (!mode_select && !mode_deselect) {
+            if(event_target_checked) {
+              $(children).filter(':not(:checked)').click().trigger('change');
             }
-          }
-          else {
-            //Checkbox unchecked. Uncheck children if all were checked.
-            if(!$(children).not(':checked').length) {
-              $(children).click().trigger('change');
+            else {
+              $(children).filter(':checked').click().trigger('change');
             }
+          } else if (mode_select && event_target_checked) {
+            $(children).filter(':not(:checked)').click().trigger('change');
+          } else if (mode_deselect && !event_target_checked) {
+            $(children).filter(':checked').click().trigger('change');
           }
-
         });
         //End process checkbox changes.
       } //End Want a cascading checking.
@@ -265,22 +273,20 @@
   }

   if(checkbox) {
-    if(item.hasClass('select-parents')) {
+    if(item.hasClass('term-referencetree-select-parents')) {
       var track_list_container = item.find('.term-reference-tree-track-list');
-      var input_type =
-          ( item.has('input[type=checkbox]').size() > 0 ) ? 'checkbox' : 'radio';

-      if(checkbox.attr('checked')) {
+      if(checkbox.prop('checked')) {
         checkbox.parents('ul.term-reference-tree-level li').children('div.form-item').children('input[type=checkbox]').each(function() {
-          $(this).attr('checked', checkbox.attr('checked'));
+          $(this).prop('checked', true);

           if(track_list_container) {
-            label_element = $(this).next();
+            var label_element = $(this).next();
             addItemToTrackList(
               track_list_container,         //Where to add new item.
               label_element.html(),         //Text of new item.
               $(label_element).attr('for'), //Id of control new item is for.
-              input_type                    //checkbox or radio
+              (item.has('input[type=checkbox]').size() > 0) ? 'checkbox' : 'radio'
             );
           }
         });